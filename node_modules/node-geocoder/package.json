{
  "_from": "node-geocoder@^3.27.0",
  "_id": "node-geocoder@3.27.0",
  "_inBundle": false,
  "_integrity": "sha512-fNMi9smx56wFhG+2sd0qVsq5RgNlkUuQQ7UWqPwynoMb0GjxSP9joAn8wah4YDv6UzZu3b41cNmd0BglEPkC+Q==",
  "_location": "/node-geocoder",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-geocoder",
    "fetchSpec": "^3.27.0",
    "name": "node-geocoder",
    "raw": "node-geocoder@^3.27.0",
    "rawSpec": "^3.27.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-geocoder/-/node-geocoder-3.27.0.tgz",
  "_shasum": "56fe360ab3a8e54050be41dc82a980bf99456a49",
  "_spec": "node-geocoder@^3.27.0",
  "_where": "/workspace/webdevbootcampFinal/Airbnb",
  "author": {
    "name": "nchaulet"
  },
  "bugs": {
    "url": "https://github.com/nchaulet/node-geocoder/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bluebird": "^3.5.2",
    "node-fetch": "^2.6.0",
    "request": "^2.88.0",
    "request-promise": "^4.2.2"
  },
  "deprecated": false,
  "description": "Node Geocoder, node geocoding library, supports google maps, mapquest, open street map, tom tom, promise",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^6.8.0",
    "jest": "^25.1.0",
    "sinon": "^1.17.3"
  },
  "eslintConfig": {
    "env": {
      "es6": true,
      "node": true
    },
    "parserOptions": {
      "ecmaVersion": 2019,
      "sourceType": "module"
    },
    "rules": {
      "camelcase": 0,
      "comma-spacing": 0,
      "eqeqeq": 0,
      "key-spacing": 0,
      "no-console": 1,
      "no-multi-spaces": 0,
      "no-shadow": 0,
      "no-underscore-dangle": 0,
      "no-unreachable": 1,
      "quotes": [
        1,
        "single"
      ],
      "strict": 0
    }
  },
  "homepage": "https://github.com/nchaulet/node-geocoder#readme",
  "jest": {
    "testEnvironment": "node"
  },
  "keywords": [
    "agol",
    "arcgis",
    "geo",
    "geocoder",
    "geocoding",
    "google",
    "mapquest",
    "maps",
    "tomtom"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-geocoder",
  "optionalDependencies": {},
  "readme": "# node-geocoder\n\n[![Build Status](https://img.shields.io/travis/nchaulet/node-geocoder.svg?style=flat-square)](https://travis-ci.org/nchaulet/node-geocoder)\n![Dependencycy status](https://img.shields.io/david/nchaulet/node-geocoder.svg?style=flat-square)\n[![npm version](https://img.shields.io/npm/v/node-geocoder.svg?style=flat-square)](https://www.npmjs.com/package/node-geocoder)\n\nNode library for geocoding and reverse geocoding. Can be used as a nodejs library\n\n## Installation (nodejs library)\n\n    npm install node-geocoder\n\n## Usage example\n\n```javascript\nconst NodeGeocoder = require('node-geocoder');\n\nconst options = {\n  provider: 'google',\n\n  // Optional depending on the providers\n  fetch: customFetchImplementation,\n  apiKey: 'YOUR_API_KEY', // for Mapquest, OpenCage, Google Premier\n  formatter: null // 'gpx', 'string', ...\n};\n\nconst geocoder = NodeGeocoder(options);\n\n// Using callback\nconst res = await geocoder.geocode('29 champs elysée paris');\n\n// output :\n[\n  {\n    latitude: 48.8698679,\n    longitude: 2.3072976,\n    country: 'France',\n    countryCode: 'FR',\n    city: 'Paris',\n    zipcode: '75008',\n    streetName: 'Champs-Élysées',\n    streetNumber: '29',\n    administrativeLevels: {\n      level1long: 'Île-de-France',\n      level1short: 'IDF',\n      level2long: 'Paris',\n      level2short: '75'\n    },\n    provider: 'google'\n  }\n];\n```\n\n## Advanced usage (only google, here, mapquest, locationiq, and opencage providers)\n\n```javascript\nconst res = await geocoder.geocode({\n  address: '29 champs elysée',\n  country: 'France',\n  zipcode: '75008'\n});\n\n// OpenCage advanced usage example\nconst res = await geocoder.geocode({\n  address: '29 champs elysée',\n  countryCode: 'fr',\n  minConfidence: 0.5,\n  limit: 5\n});\n\n// Reverse example\n\nconst res = await geocoder.reverse({ lat: 45.767, lon: 4.833 });\n\n// Batch geocode\n\nconst results = await geocoder.batchGeocode([\n  '13 rue sainte catherine',\n  'another adress'\n]);\n\n// Set specific http request headers:\nconst nodeFetch = require('node-fetch');\n\nconst geocoder = NodeGeocoder({\n  provider: 'google',\n  fetch: function fetch(url, options) {\n    return nodeFetch(url, {\n      ...options,\n      headers: {\n        'user-agent': 'My application <email@domain.com>',\n        'X-Specific-Header': 'Specific value'\n      }\n    });\n  }\n});\n```\n\n## Geocoder Providers (in alphabetical order)\n\n- `agol` : ArcGis Online Geocoding service. Supports geocoding and reverse. Requires a client_id & client_secret\n- `datasciencetoolkit` : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use `options.host` to specify a local instance\n- `freegeoip` : FreegeoipGeocoder. Supports IP geocoding\n- `geocodio`: Geocodio, Supports address geocoding and reverse geocoding (US only)\n- `google` : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use `options.clientId`and `options.apiKey`(privateKey) for business licence. You can also use `options.language` and `options.region` to specify language and region, respectively.\n- `here` : HereGeocoder. Supports address geocoding and reverse geocoding. You must specify `options.apiKey` with your Here API key. You can also use `options.language`, `options.politicalView` ([read about political views here](https://developer.here.com/rest-apis/documentation/geocoder/topics/political-views.html)), `options.country`, and `options.state`.\n- `locationiq` : LocationIQGeocoder. Supports address geocoding and reverse geocoding just like openstreetmap but does require only a locationiq api key to be set.\n  - For `geocode` you can use simple `q` parameter or an object containing th edifferent parameters defined here: http://locationiq.org/#docs\n  - For `reverse`, you can pass over `{lat, lon}` and additional parameters defined in http://locationiq.org/#docs\n  - No need to specify referer or email addresses, just locationiq api key, note that there are rate limits!\n- `mapquest` : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n- `nominatimmapquest`: Same geocoder as `openstreetmap`, but queries the MapQuest servers. You need to specify `options.apiKey`\n- `opencage`: OpenCage Geocoder. Aggregates many different open geocoder. Supports address and reverse geocoding with [many optional parameters](https://opencagedata.com/api#forward-opt). You need to specify `options.apiKey` which can be obtained at [OpenCage](https://opencagedata.com).\n- `opendatafrance`: OpendataFranceGeocoder supports forward and reverse geocoding in France; for more information, see [OpendataFrance API documentation](https://adresse.data.gouv.fr/api/)\n- `openmapquest` : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\n- `openstreetmap` : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use `options.language` and `options.email` to specify a language and a contact email address.\n  - For `geocode`, you can use an object as value, specifying [one or several parameters](http://nominatim.org/release-docs/latest/api/Search/)\n  - For `reverse`, you can use [additional parameters](http://nominatim.org/release-docs/latest/api/Reverse/)\n  - You should specify a specific `user-agent` or `referrer` header field as required by the [OpenStreetMap Usage Policy](https://operations.osmfoundation.org/policies/nominatim/)\n  - Set `options.osmServer` to use custom nominatim server. Example: you can setup local nominatim server by following [these instructions](http://nominatim.org/release-docs/latest/admin/Installation/) and set `options.osmServer: http://localhost:8000` to use local server.\n- `nominatimmapquest`: Same geocoder as `openstreetmap`, but queries the MapQuest servers. You need to specify `options.apiKey`\n- `pickpoint`: PickPoint Geocoder. Supports address geocoding and reverse geocoding. You need to specify `options.apiKey` obtained at [PickPoint](https://pickpoint.io).\n  - As parameter for `geocode` function you can use a string representing an address like \"13 rue sainte catherine\" or an object with parameters described in [Forward Geocoding Reference](https://pickpoint.io/api-reference#forward-geocoding).\n  - For `geocode` function you should use an object where `{lat, lon}` are required parameters. Additional parameters like `zoom` are available, see details in [Reverse Geocoding Reference](https://pickpoint.io/api-reference#reverse-geocoding).\n- `smartyStreet`: Smarty street geocoder (US only), you need to specify `options.auth_id` and `options.auth_token`\n- `teleport`: Teleport supports city and urban area forward and reverse geocoding; for more information, see [Teleport API documentation](https://developers.teleport.org/api/)\n- `tomtom`: TomTomGeocoder. Supports address geocoding. You need to specify `options.apiKey` and can use `options.language` to specify a language\n- `virtualearth`: VirtualEarthGeocoder (Bing maps). Supports address geocoding. You need to specify `options.apiKey`\n- `yandex`: Yandex support address geocoding, you can use `options.language` to specify language\n\n## Http adapter\n\nHttp adapter is deprecated, you can now use the `fetch` to provide your own fetch method compatible with the Fetch API [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\n## Fetch option\n\nWith the `options.fetch` you can provide your own method to fetch data. This method should be compatible with the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\nThis allow you to specify a proxy to use, a custom timeout, specific headers, ...\n\n## Formatter\n\n- `gpx` : format result using GPX format\n- `string` : format result to an String array (you need to specify `options.formatterPattern` key)\n  - `%P` country\n  - `%p` country code\n  - `%n` street number\n  - `%S` street name\n  - `%z` zip code\n  - `%T` State\n  - `%t` state code\n  - `%c` City\n\n## More\n\n### Playground\n\nYou can try node-geocoder here http://node-geocoder.herokuapp.com/\n\n### Command line tools\n\n[`node-geocoder-cli`](https://github.com/nchaulet/node-geocoder-cli) You can use node-geocoder-cli to geocode in shell\n\n### Extending node geocoder\n\nYou can add new geocoders by implementing the two methods `geocode` and `reverse`:\n\n```javascript\nconst geocoder = {\n    geocode: function(value, callback) { ... },\n    reverse: function(query, callback) { var lat = query.lat; var lon = query.lon; ... }\n}\n```\n\nYou can also add formatter implementing the following interface\n\n```javascript\nconst formatter = {\n  format: function(data) {\n    return formattedData;\n  }\n};\n```\n\n### Contributing\n\nYou can improve this project by adding new geocoders.\n\nTo run tests just `npm test`.\n\nTo check code style just run `npm run lint`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nchaulet/node-geocoder.git"
  },
  "scripts": {
    "ci": "npm run lint && npm run test",
    "lint": "eslint lib",
    "test": "jest --maxWorkers=2"
  },
  "version": "3.27.0"
}
